spring.application.name=psoft-g1

## LENDING RECOMMENDATION PROPERTIES
universal.lendingRecommendation.x=3
universal.lendingRecommendation.y=2
universal.lendingRecommendation.algorithm=alg1
universal.lendingRecommendation.minAge=10
universal.lendingRecommendation.adultAge=18

## GENERATE ID
universal.generateID = AuthorIDService1

#'Jpa' ou 'Mongo'
repository.suffix=Mongo

author.repository.type=author${repository.suffix}
book.repository.type=book${repository.suffix}
genre.repository.type=genre${repository.suffix}
lending.repository.type=lending${repository.suffix}
reader.repository.type=reader${repository.suffix}
user.repository.type=user${repository.suffix}
fine.repository.type=fine${repository.suffix}


##
## Profiles
##
spring.profiles.active=bootstrap

server.port=8081
##
## OpenAPI
##
springdoc.api-docs.enabled=true
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui

##
## JWT
##
jwt.private.key=classpath:rsa.private.key
jwt.public.key=classpath:rsa.public.key

##
## datasource
##
# ^ H2 Console needs to be running, and file needs to be previously created in path ^
#spring.datasource.url=jdbc:h2:~/psoft-g1
# ^ H2 Console CAN'T be running, and file needs to be previously created in path ^
#spring.datasource.url=jdbc:h2:mem:testdb
# ^ No prerequisites ^
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=mysqluser
#spring.datasource.password=mysqlpass
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect

#java -cp h2-2.3.232.jar org.h2.tools.Server
# ^ run before connection
spring.datasource.url=jdbc:h2:tcp://localhost/~/psoft-g1;IGNORECASE=TRUE;IFEXISTS=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=mysqluser
spring.datasource.password=mysqlpass
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.path=/h2-console

mongodb=//admin:admin@localhost:27017/
## show SQL
spring.jpa.show-sql=false
#hibernate.show_sql=false
#spring.jpa.hibernate.format_sql=true
#Ricardo: what is this for?

## database schema generation
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update

##
## H2 console for development purposes.
## e.g., http://localhost:8080/h2-console
##
## for security reasons this setting should be false
spring.h2.console.enabled=true

##
## MULTIPART (MultipartProperties)
##
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

##
## File Storage Properties
##
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=uploads-psoft-g1
#Maximum photo size -> in bytes | by the rules of the forum it's 20KB
file.photo_max_size=20000

## Api Ninjas key
my.ninjas-key=a5nSlaa4JxIubY09H+NYuQ==cY9FegnFmAvYi6fN

##
## OAuth2 Client
##
spring.security.oauth2.client.registration.google.client-id=12047732954-3llorr03o9bcasdkp0o7917nnhjmgteg.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid, profile, email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
spring.security.oauth2.client.provider.google.user-info-authentication-method=header
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
