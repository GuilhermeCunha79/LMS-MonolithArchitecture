pipeline {
    agent any
    environment {
        POM_LOC = "psoft-project-2024-g1"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Clean') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'rm -rf target/'
                    } else if (isWindows()) {
                        bat 'rd /s /q target'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn clean package -DskipTests'
                        } else if (isWindows()) {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Unit Testing') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn test'
                        } else if (isWindows()) {
                            bat 'mvn test'
                        }
                    }
                }
            }
        }

        stage("Publish Static Code Analysis") {
            steps {
                script {
                    dir(POM_LOC) {
                        withSonarQubeEnv('sonarqube') {
                            sh 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=1201506_arqsoft-25-1201506-1211439'
                        }
                    }
                }
            }
        }

        stage("SonarQube Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qualityGateResult = waitForQualityGate abortPipeline: true

                        if (qualityGateResult.status == 'OK') {
                            echo 'Quality gate passed. Proceeding with the pipeline.'
                        }
                    }
                }
            }
        }

        stage('Jacoco Report') {
            steps {
                jacoco execPattern: '**/target/jacoco.exec',
                       classPattern: '**/target/classes',
                       sourcePattern: '**/src/main/java',
                       inclusionPattern: '**/*.class'
            }
        }

        /*
        stage('Mutation Testing') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn org.pitest:pitest-maven:mutationCoverage'
                        } else if (isWindows()) {
                            bat 'mvn org.pitest:pitest-maven:mutationCoverage'
                        }
                    }
                }
            }
        }
        */

        stage('Integration Testing') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn verify -DskipTests'
                        } else if (isWindows()) {
                            bat 'mvn verify -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Install') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn install -DskipTests -DskipITs -DskipPitest'
                        } else if (isWindows()) {
                            bat 'mvn install -DskipTests -DskipITs -DskipPitest'
                        }
                    }
                }
            }
        }

        /*
        stage('Deploy') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (fileExists('target/psoft-g1-0.0.1-SNAPSHOT.jar')) {
                            echo 'Deploying application...'
                            if (isUnix()) {
                                sh 'java -jar target/psoft-g1-0.0.1-SNAPSHOT.jar &'
                            } else {
                                bat 'start java -jar target\\psoft-g1-0.0.1-SNAPSHOT.jar'
                            }
                        } else {
                            error 'JAR file not found. Aborting deployment.'
                        }
                    }
                }
            }
        }
        */

        post {
                always {
                    echo 'Pipeline completed. Workspace cleaned.'
                    cleanWs()
                }
                success {
                    echo 'Pipeline succeeded.'
                }
                failure {
                    echo 'Pipeline failed.'
                }
            }
    }
}
