pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
    }

    environment {
        POM_LOC = "psoft-project-2024-g1"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Clean') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'rm -rf target/'
                    } else {
                        bat 'if exist target rd /s /q target'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn clean package -DskipTests'
                        } else {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }



                stage('Unit Testing') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn test'
                                } else {
                                    bat 'mvn test'
                                }
                            }
                        }
                    }
                }

                stage('Integration Testing') {
                    steps {
                        script {
                            dir(POM_LOC) {
                                if (isUnix()) {
                                    sh 'mvn verify -DskipTests'
                                } else {
                                    bat 'mvn verify -DskipTests'
                                }
                            }
                        }
                    }

            }


        stage('Mutation Testing') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn org.pitest:pitest-maven:mutationCoverage'
                        } else {
                            bat 'mvn org.pitest:pitest-maven:mutationCoverage'
                        }
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    dir(POM_LOC) {
                        withSonarQubeEnv('sonarqube') {
                            if (isUnix()) {
                                sh 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=1201506_arqsoft-25-1201506-1211439'
                            } else {
                                bat 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=1201506_arqsoft-25-1201506-1211439'
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qualityGateResult = waitForQualityGate abortPipeline: true
                        if (qualityGateResult.status == 'OK') {
                            echo 'Quality gate passed. Proceeding with the pipeline.'
                        }
                    }
                }
            }
        }

        stage('Jacoco Report') {
            steps {
                jacoco execPattern: '**/target/jacoco.exec',
                       classPattern: '**/target/classes',
                       sourcePattern: '**/src/main/java',
                       inclusionPattern: '**/*.class'
            }
        }

        stage('Install') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn install -DskipTests -DskipITs -DskipPitest'
                        } else {
                            bat 'mvn install -DskipTests -DskipITs -DskipPitest'
                        }
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'docker build -t pt.psoft.g1.psoft -f Dockerfile .'
                        } else {
                            bat 'docker build -t pt.psoft.g1.psoft -f Dockerfile .'
                        }
                    }
                }
            }
        }

        stage('Local Deploy') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'docker stop psoft-container && docker rm psoft-container || true && docker run -d --name psoft-container -p 8081:8081 pt.psoft.g1.psoft'
                        } else {
                            bat 'docker stop psoft-container && docker rm psoft-container || true && docker run -d --name psoft-container -p 8081:8081 pt.psoft.g1.psoft'
                        }
                    }
                }
            }
        }

        stage('Deploy to VM') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'scp -o StrictHostKeyChecking=no -P 11362 -i ~/.ssh/id_rsa_vs1362.txt target/psoft-g1-0.0.1-SNAPSHOT.jar root@vsgate-ssh.dei.isep.ipp.pt:~/app/ && ssh root@vsgate-ssh.dei.isep.ipp.pt -p 11362 -i ~/.ssh/id_rsa_vs1362.txt "nohup java -jar -Dserver.port=2228 ~/app/psoft-g1-0.0.1-SNAPSHOT.jar > ~/app/app.log 2>&1 &"'
                        } else {
                            bat 'scp -o StrictHostKeyChecking=no -P 11362 -i ~/.ssh/id_rsa_vs1362.txt target/psoft-g1-0.0.1-SNAPSHOT.jar root@vsgate-ssh.dei.isep.ipp.pt:~/app/ && ssh root@vsgate-ssh.dei.isep.ipp.pt -p 11362 -i ~/.ssh/id_rsa_vs1362.txt "nohup java -jar -Dserver.port=2228 ~/app/psoft-g1-0.0.1-SNAPSHOT.jar > ~/app/app.log 2>&1 &"'
                        }
                    }
                }
            }
        }

        /* //Should listen on (https://vs-gate.dei.isep.ipp.pt:31362)
        stage('Smoke Tests') {
            steps {
                script {
                    dir(POM_LOC) {
                        if (isUnix()) {
                            sh 'mvn test -Dtest=SmokeTest'
                        } else {
                            bat 'mvn test -Dtest=SmokeTest'
                        }
                    }
                }
            }
        }*/
    }

    post {
        always {
            echo 'Pipeline completed. Workspace cleaned.'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
